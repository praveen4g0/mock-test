4. Create a pod and secret (username and password), inject those secrets as env in your pod (logic of your choice)




create a new namespace/project 


	oc whoami 
	-developer

oc new-project pod-secrets

1. create secret from cli 
oc create secret generic my-secret --from-literal=username=admin --from-literal=password=redhat


secrets/my-secret created



oc get secrets


deployer-token-vspgn       kubernetes.io/service-account-token   4         22h
my-secret                  Opaque                                2         21h



oc get secret/my-secret -o yaml 


apiVersion: v1
data:
  password: cGFzcw==
  username: cHJhdmVlbg==
kind: Secret
metadata:
  creationTimestamp: 2019-06-12T12:18:08Z
  name: my-secret
  namespace: q1
  resourceVersion: "197809"
  selfLink: /api/v1/namespaces/q1/secrets/my-secret
  uid: 23a33282-8d0c-11e9-ba24-52540028134f
type: Opaque

2. to create secret from yaml resource 

values has to be enocded using base64 encoder


echo -n 'admin'|base64
cGFzcw==

echo -n 'redhat'|base64

cHJhdmVlbg==


now need to create a resource of pod which takes data from secrets that we have just now created 



3. create yaml file to read secrets data that you have injected at run time to namespace


apiVersion: v1
kind: Pod
metadata:
  name: secret-example-pod
spec:
  containers:
    - name: secret-test-container
      image: nginx
      command: [ "/bin/sh" ]
      args: ["-c","while true; do echo ${USER_NAME}; sleep 10; done"]
      env:
        - name: USER_NAME
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: password
  restartPolicy: Never





now deploy pod 

oc create -f pod-secrets.yaml


oc logs -f pod/







Another different way of injecting secrets to pod/deployments


create a dc with that takes value at runtime from secrets 


kind: DeploymentConfig
apiVersion: v1
metadata:
  name: env-pod
spec:
  template:
    metadata:
      labels:
        name: env-pod
    spec:
      containers:
        - name: nginx
          image: nginx
          command: [ "/bin/sh" ]
          args: ["-c","while true; do echo ${ENV_USERNAME}; sleep 10; done"]
          env:
          - name: ENV_USERNAME
            value: ${ENV_USERNAME}
          - name: ENV_PASSWORD
            value: ${ENV_PASSWORD}
  replicas: 1
  selector:
    name: env-pod


 oc create -f deployment.yaml 



 oc set env --from=secret/my-secret dc/env-pod  --prefix=ENV_



oc get pods
NAME                               READY     STATUS             RESTARTS   AGE
cakephp-mysql-persistent-1-build   0/1       Error              0          6h
dapi-test-pod                      0/1       Completed          0          22h
env-pod-2-j4wdz                    1/1       Running            0          2m
job-parallel-jlm47                 1/1       Running            0          1h

now check logs of env-pod 

 oc logs -f pod/env-pod-2-j4wdz

 admin
 admin
...












 













